generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reviews {
  id        String        @id @default(cuid())
  userId    String
  rating    Int
  review    String
  userName  String?
  lawyerId  String
  createdAt DateTime      @default(now())
  user      LawyerDetails @relation(fields: [lawyerId], references: [lawyerId], onDelete: Cascade)
}

model Order {
  id          String        @id @default(cuid())
  lawyerId    String
  clientId    String
  createdAt   DateTime      @default(now())
  price       Int
  orderStatus OrderStatus   @default(PENDING)
  client      User          @relation(fields: [clientId], references: [id])
  lawyer      LawyerDetails @relation(fields: [lawyerId], references: [id])
}

model LawyerDetails {
  id           String    @id @default(cuid())
  lawyerId     String    @unique
  institution  String
  course       String
  experience   Int
  description  String
  rating       Int?      @default(0)
  country      String
  expertise    String
  fullName     String
  services     String
  state        String
  numofreviews Int?      @default(0)
  image        String?
  price        Int       @default(0)
  lawyer       User      @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  orders       Order[]
  reviews      Reviews[]
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  role          Role           @default(USER)
  accounts      Account[]
  lawyerDetails LawyerDetails?
  orders        Order[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  FAILED
  CONFORMED
}

enum Role {
  USER
  LAWYER
  ADMIN
}
